---
import BaseLayout from "../../layouts/BaseLayout.astro";
import tabJoursEnOrdre from '../../components/Utilitaire/gestionTemps.js';
---

<style>
*, ::before, ::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: Arial, Helvetica, sans-serif;
    color: #f1f1f1;
    background: linear-gradient(45deg, rgb(59,50,50), rgb(22,28,29));
    height: 100vh;
}

.container {
    width: 800px;
    height: 600px;
    background: linear-gradient(45deg, #1068b6, #ec60a6);
    display: grid;
    grid-template: 100px 300px 100px 100px / repeat(8, 100px);
    margin: 100px auto 0;
    position: relative;
    border: 1px solid #f1f1f1;
}

h1 {
    /* deb row / deb col / fin row / fin col */
    grid-area: 1 / 1 / 2 / -1;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom: 1px solid #f1f1f1;
}

.bloc-logo-info {
    grid-area: 2 / 1 / 3 / -1;
    display: flex;
    justify-content: center;
    align-items: center;
}
.bloc-logo {
    width: 50%;
}
.bloc-logo img {
    width: 100%;
    height: auto;
}
.bloc-info {
    width: 50%;
}
.bloc-info .temps {
    font-size: 40px;
}
.bloc-info .temps::first-letter {
    text-transform: capitalize;
}
.bloc-info .temperature {
    font-size: 60px;
}
.bloc-info .localisation {
    font-size: 40px;
    word-wrap: break-word;
}

.heure-bloc-prevision {
    grid-area: 3 / 1 / 4 / -1;
}
.jour-prevision-bloc {
    grid-area: 4 / 1 / 5 / -1;
}
.jour-prevision-bloc, .heure-bloc-prevision {
    display: grid;
    grid-template: 100px / repeat(7, 1fr);
}

.bloc-h, .bloc-j {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    border-top: 1px solid #f1f1f1;
    font-size: 21px;
}

.bloc-h:not(:last-child), .bloc-j:not(:last-child) {
    border-right: 1px solid #f1f1f1;
}

.bloc-h p, .bloc-j p {
    margin: 5px;
}

/* Animation chargement */

.overlay-icone-chargement {
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgb(59,50,50), rgb(22,28,29));
    transition: opacity 1.1s ease-out;
    z-index: 1000;
}
.overlay-icone-chargement img {
    width: 150px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
.disparition {
    opacity: 0;
}
</style>

<BaseLayout>
    <div class="container">

        <div class="overlay-icone-chargement">
            <img src="ressources/chargement/circles.svg" alt="logo chargement">
        </div>

        <h1>Application météo</h1>

        <div class="bloc-logo-info">

            <div class="bloc-logo">
                <img src="./ressources/jour/04d.svg" alt="logo du temps qu'il fait" class="logo-meteo">
            </div>

            <div class="bloc-info">
                <p class="temps"></p>
                <p class="temperature"></p>
                <p class="localisation"></p>
            </div>

        </div>


        <div class="heure-bloc-prevision">
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
            <div class="bloc-h">
                <p class="heure-nom-prevision"></p>
                <p class="heure-prevision-valeur"></p>
            </div>
        </div>


        <div class="jour-prevision-bloc">
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
            <div class="bloc-j">
                <p class="jour-prevision-nom"></p>
                <p class="jour-prevision-temp"></p>
            </div>
        </div>

    </div>

</BaseLayout>
<script>
import tabJoursEnOrdre from "../../components/Utilitaire/gestionTemps";



    const CLEFAPI = '978fca89027e0bd23f064b975cbe818c';
    let resultatsAPI;
    
    const temps = document.querySelector('.temps');
    const temperature = document.querySelector('.temperature');
    const localisation = document.querySelector('.localisation');
    const heure = document.querySelectorAll('.heure-nom-prevision');
    const tempPourH = document.querySelectorAll('.heure-prevision-valeur');
    const joursDiv = document.querySelectorAll('.jour-prevision-nom');
    const tempJoursDiv = document.querySelectorAll('.jour-prevision-temp');
    const imgIcone = document.querySelector('.logo-meteo');
    const chargementContainer = document.querySelector('.overlay-icone-chargement');
    
    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
            let long = position.coords.longitude;
            let lat = position.coords.latitude;
            AppelAPI(long,lat);
    
        }, () => {
            alert(`Vous avez refusé la géolocalisation, l'application ne peur pas fonctionner, veuillez l'activer.!`)
        })
    }
    
    function AppelAPI(long, lat) {
    
        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=minutely&units=metric&lang=fr&appid=${CLEFAPI}`)
        .then((reponse) => {
            return reponse.json();
        })
        .then((data) => {
            // console.log(data);
    
            resultatsAPI = data;
    
            temps.innerHTML = resultatsAPI.current.weather[0].description;
            temperature.innerHTML = `${Math.trunc(resultatsAPI.current.temp)}°`
            localisation.innerHTML = resultatsAPI.timezone;
    
    
            // les heures, par tranche de trois, avec leur temperature.
    
            let heureActuelle = new Date().getHours();
    
            for(let i = 0; i < heure.length; i++) {
    
                let heureIncr = heureActuelle + i * 3;
    
                if(heureIncr > 24) {
                    heure[i].innerHTML = `${heureIncr - 24} h`;
                } else if(heureIncr === 24) {
                    heure[i].innerHTML = "00 h"
                } else {
                    heure[i].innerHTML = `${heureIncr} h`;
                }
    
            }
    
            // temp pour 3h
            for(let j = 0; j < tempPourH.length; j++) {
                tempPourH[j].innerHTML = `${Math.trunc(resultatsAPI.hourly[j * 3].temp)}°`
            }
    
    
            // trois premieres lettres des jours 
    
            for(let k = 0; k < tabJoursEnOrdre.length; k++) {
                joursDiv[k].innerHTML = tabJoursEnOrdre[k].slice(0,3);
            }
    
    
            // Temp par jour
            for(let m = 0; m < 7; m++){
                tempJoursDiv[m].innerHTML = `${Math.trunc(resultatsAPI.daily[m + 1].temp.day)}°`
            }
    
            // Icone dynamique 
             if(heureActuelle >= 6 && heureActuelle < 21) {
                 imgIcone.src = `ressources/jour/${resultatsAPI.current.weather[0].icon}.svg`
             } else  {
                imgIcone.src = `ressources/nuit/${resultatsAPI.current.weather[0].icon}.svg`
             }
    
    
             chargementContainer.classList.add('disparition');
    
        })
    
    }    
    </script>   